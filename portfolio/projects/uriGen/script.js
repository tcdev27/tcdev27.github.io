/*

  URI Generator - Copyright Tom Chadwick 2017

*/

// Global Variables
var programmeID;
var channelID;
var redirectTo;

// Output Preparation - Font Import
document.head.innerHTML += '<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">'

/*

  1 - Append the Form:
      - Add the URI Generator Form to the bottom  of the page.

*/

// Defined some Variable for Output Styling and Particular Elements
var outputStyle = "font-family: 'Roboto'; padding: 20px; color: #fff; background-color: #474e56; border-radius: 5px; font-size: 16pt; max-width: 750px;";
var inputStyle = 'width: 95%; padding: 5px; font-size: 75%;'
var btnStyle = 'color: #000; border: #000; padding: 12px; margin: 12px; font-size: 100%; border-radius: 5px;'
var submitBtn = '<button style="'+ btnStyle +'background-color: #89b247;" type="button" onclick="genURI()" class="btn btn-default">Submit</button>'
var copyBtn = '<button id="copyBtn" type="button" onclick="copyUri()" style="' + btnStyle + 'background-color: #89b247;">Copy to Clipboard</button>'
var resetBtn = '<button type="button" onclick="resetGen()" style="' + btnStyle + 'color: #fff; background-color: #be2a2a;">Reset</button>'

// Add the Form to the Page
document.body.innerHTML += '<div width="100%" style="'+
outputStyle +
'" id="form">' +
'<h1 style="font-size: 125%">URI-Generator </h1>' +
'<p>Fill in the fields below and submit to generate a URI.</p> <form><div class=""><label for="programme_id">Programme ID</label><input style="' + inputStyle + '" type="number" class="" name="programme_id" placeholder="Programme ID"></div><div class=""><label for="channel_id">Channel ID</label><input style="' + inputStyle + '" type="number" class="" name="channel_id" placeholder="Channel ID"></div><div class=""><label for="redirect_to">Redirect To</label><input style="' + inputStyle + '" type="string" class="" name="redirect_to" placeholder="Redirect To"></div> '
+ submitBtn +
 '</form> </div>';



/*

  2 - Generation Function:
      - Called by the Submission of a form that includes the 3 required fields.
      - It Validates the Data Submitted and if it passes it then creates a uri to output

*/
function genURI() {
  // See if a URI has already been generated by checking
  var check = document.getElementById('output');
  // If there is NOT Already a URI Output
  if(!check) {
    // Select Each Field Based on their Names and get the Values <--- This will require the page to have the correct names for each field.
    programmeID = +document.querySelector("input[name='programme_id']").value;
    channelID = +document.querySelector("input[name='channel_id']").value;
    redirectTo = document.querySelector("input[name='redirect_to']").value;

    // Validate the Data Received
    result = validate(programmeID, channelID, redirectTo);
    // If the Validation returns true
    if (result == true) {
      // Output the URI
      outputURI(programmeID, channelID, redirectTo);
    } else {
      // Otherwise an Error Must of been found, output this to the User.
      outputErrors(result);
    }
  } else {
    // If there IS already a URI Output, remove it then recall the genURI Function
    document.getElementById('output').remove();
    genURI();
  }
}

/*

  3 - Validation Function:
      - Called upon by genURI() function.
      - Runs through the provided data and ensures the following:
        -- All 3 input values have been provided.
        -- Both Programmed ID and and Channel ID are integers (Positive).
      - As it runs any errors found are compiled within a 'messages' variable.
      - If it gets to the end of function and the messages variable is empty it will return 'true' and confirm that the data is valid.
      - If any errors have been found they will be returned instead so that the UI can notify the user of them and allow them to fix it.

*/

function validate(programmeID, channelID, redirectTo) {
  var messages = [];

  //Check for an Input for Each Field and Validate the Data types
  if (programmeID) {
    var type1 = typeof programmeID;
    if (type1 == "number") {
      if (programmeID >= 1) {

      } else {
        messages.push('Invalid Programme ID: It must be Greater Than 0.');
      }
    } else {
        messages.push('Invalid Programme ID: It Must be a Number.');
    }
  } else {
    messages.push('Please Enter a Programme ID.');
  }
  if (channelID) {
    var type2 = typeof channelID;
    if (type2 == "number") {
      if (channelID >= 1) {

      } else {
        messages.push('Invalid Channel ID: It must be Greater Than 0.');
      }
    }else {
      messages.push('Invalid Channel ID: It Must be a Number');
    }
  } else {
    messages.push('Please Enter a Channel ID.');
  }
  if (redirectTo) {
  } else {
    messages.push('Please Enter a Redirect Path.');
  }



  // if any errors found, return them instead
  if (messages.length> 0) {
    return(messages);
  } else {
    return true;
  }
}

/*

  4 - Copy Function:
      - Called When the 'Copy to Clipboard' button is clicked after this script has generated a URI.
      - It will select a hidden textarea field which contains the URI and copy it to the user's clipboard.

*/

function copyUri() {
  // Copy contents from hidden textarea.
  var output = document.getElementById('hiddenUri');
  output.select();
  document.execCommand('copy');
  // Change Button Text to 'Copied!' as confirmation
  var button = document.getElementById('copyBtn');
  button.innerHTML = "Copied!"
}

/*

  5 - Output Function:
      - After Validation has passed this function is run to take the 3 fields and add them to the set URI template and produce the actual output.
      - The output consists of an appended <div>.

*/

function outputURI(programmeID, channelID, redirectTo) {
  // Combine the 3 Input values with the URI template
  var uri = "http://localhost:3000/ww/form_builder/forms/14/completions/new?programme_id=" + programmeID + "&channel_id=" + channelID + "&redirect_to=" + redirectTo;

  //document.getElementById("output").innerHTML = uri;

  // Add the Output to the Page
  document.getElementById('form').innerHTML +=
  '<div width="100%" style="'+ outputStyle +' padding: 0; max-width: 100%;" id="output">' + '<h1 style="font-size: 125%">URI: </h1>' + '<p id="uri" style="background-color: #fff; color: #000; border-radius: 5px; padding: 2px; border: 2px solid #000;">' + uri + '</p>' + copyBtn + '<textarea id="hiddenUri" style="position: absolute; top: -100%">' + uri +'</textarea>' + resetBtn + '</div>';

  // Remove Error Output if one exists
  var error = document.getElementById('error');
  if(!error) {
  }else {
    error.remove();
  }
}

/*

  6 - Output Errors:
      - ...

*/

function outputErrors(result) {
  // Check for pre-existing error output, if found, remove it
  var check = document.getElementById('error');
  if(!check) {
    //alert('Error: \n' + result.join('\n'));
    //console.log(result);

    // Styling Variables
    var errorStyle = "font-family: 'Roboto'; padding: 2%; margin-bottom: 5px; color: #fff; background-color: #be2a2a; border-radius: 5px; font-size: 14pt;";

    // Output Error Container
    document.body.innerHTML += '<div id="error" style="' + errorStyle + '"><h1>Error</h1></div>'
    var error = document.getElementById('error');

    for (var x = 0; x < result.length; x++) {
      error.innerHTML += '<p> - ' + result[x] +'</p>'
    }
  } else {
    // If there IS already an Error Output, remove it then recall this Function
    document.getElementById('error').remove();
    outputErrors(result);
  }

}


/*

  7 - Reset Function:
      - This is called when the 'Reset' button is clicked after an ouput has been produced.
      - It simply removes the output <div> so that the user will not end up
        creating a long list of outputs.

*/
function resetGen() {
//  location.reload();

  var output = document.getElementById('output');
  var error = document.getElementById('error');
  if(!output) {
  }else {
    output.remove();
  }
  if(!error) {
  } else {
    error.remove();
  }

}
